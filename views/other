const express = require('express');
const fetch = require('node-fetch');
const path = require('path');

const app = express();
const PORT = 2537;

// Set EJS as the view engine
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));
app.use(express.static(path.join(__dirname, 'public')));

// Functions
async function getAllPokemon() {
    try {
        const response = await fetch('https://pokeapi.co/api/v2/pokemon?limit=3002');
        const data = await response.json();
        return data.results;
    } catch (error) {
        console.error('Error fetching Pokémon:', error);
        return [];
    }
}

// Function to fetch Pokémon by type from the PokéAPI using a provided type
async function getPokemonByType(type, req, res) {
    try {
        const response = await fetch(`https://pokeapi.co/api/v2/type/${type}`);
        const data = await response.json();
        // Extract pokemon names from the fetched data
        const pokemonNames = data.pokemon.map(entry => entry.pokemon.name);
        return pokemonNames;
    } catch (error) {
        console.error(`Error fetching Pokémon of type ${type}:`, error);
        return [];
    }
}

// Function to fetch Pokémon by two types (intersection of types)
async function getPokemonByTwoTypes(type1, type2, req, res) {
    try {
        // Fetch Pokémon for the first type
        const pokemonByType1 = await getPokemonByType(type1, req, res);
        // Fetch Pokémon for the second type
        const pokemonByType2 = await getPokemonByType(type2, req, res);

        // Find intersection of Pokémon between two types
        const pokemonNames = pokemonByType1.filter(name => pokemonByType2.includes(name));

        // Render the index.ejs template with the pokemonNames array
        res.render('index', { pokemonNames, type1, type2 });
    } catch (error) {
        console.error(`Error fetching Pokémon of types ${type1} and ${type2}:`, error);
        res.status(500).send(`Error fetching Pokémon of types ${type1} and ${type2}`);
    }
}

async function getAllPokemonTypes() {
    try {
        const response = await fetch('https://pokeapi.co/api/v2/type');
        const data = await response.json();
        return data.results.map(type => type.name);
    } catch (error) {
        console.error('Error fetching Pokémon types:', error);
        return [];
    }
}

// Route to render the index page with checkboxes
app.get('/', async (req, res) => {
    try {
        const types = await getAllPokemonTypes();
        const pokemonList = await getAllPokemon();
        const pokemonNames = pokemonList.map(pokemon => pokemon.name);
        // Render the index.ejs template with the pokemonNames array and types
        res.render('index', { types, selectedTypes: [], pokemonNames });
    } catch (error) {
        console.error('Error rendering index page:', error);
        res.status(500).send('Error rendering index page');
    }
});


// Route to handle requests for Pokémon by types (optional)
app.get('/pokemon/:type1/:type2?', async (req, res) => {
    const type1 = req.params.type1;
    const type2 = req.params.type2;

    try {
        if (type1 && type2) {
            // If both type1 and type2 are provided
            await getPokemonByTwoTypes(type1, type2, req, res);
        } else {
            // If only type1 is provided, fetch Pokémon of that type
            const pokemonNames = await getPokemonByType(type1, req, res);
            // Render the index.ejs template with the pokemonNames array
            res.render('index', { pokemonNames, type1 });
        }
    } catch (error) {
        console.error('Error processing request:', error);
        res.status(500).send('Error fetching Pokémon data');
    }
});

app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});

//index.eks
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Pokemon List</title>
  <link rel="stylesheet" href="/styles.css">
</head>
<body>

<!-- Form to select Pokémon types -->
<form id="filterForm">
  <div class="checkbox-rows">
    <% ['normal', 'fire', 'water', 'electric', 'grass', 'ice', 'fighting', 'poison', 'ground', 'flying', 'psychic', 'bug', 'rock', 'ghost', 'dragon', 'dark', 'steel', 'fairy', 'stellar', 'unknown'].forEach(function(type) { %>
      <div class="checkbox-row">
        <input type="checkbox" class="pokemon-checkbox" name="type" value="<%= type %>" id="<%= type %>" <% if (req.params.type1 === type || req.params.type2 === type) { %>checked<% } %>>
        <label for="<%= type %>"><%= type.charAt(0).toUpperCase() + type.slice(1) %></label>
      </div>
    <% }); %>
  </div>

  <button type="button" onclick="submitForm()">Filter Pokémon</button>
</form>

<!-- Display Pokémon names -->
<% if (pokemonNames && pokemonNames.length > 0) { %>
  <h2>Filtered Pokémon:</h2>
  <ul>
    <% pokemonNames.forEach(name => { %>
      <li><%= name %></li>
    <% }); %>
  </ul>
<% } else { %>
  <p>No Pokémon found.</p>
<% } %>

<script>
  // JavaScript to handle form submission
  function submitForm() {
    const checkboxes = document.querySelectorAll('.pokemon-checkbox:checked');
    const selectedTypes = Array.from(checkboxes).map(cb => cb.value);

    if (selectedTypes.length === 0) {
      alert('Please select at least one type.');
      return;
    }

    if (selectedTypes.length > 2) {
      alert('Please select up to 2 types.');
      return;
    }

    // Build the URL based on selected types
    let typeUrl = '/pokemon/' + selectedTypes[0];
    if (selectedTypes.length > 1) {
      typeUrl += '/' + selectedTypes[1];
    }

    window.location.href = typeUrl;
  }
</script>

</body>
</html>

/